Vector3 difference = target.position - characterTransform.position;
difference.y = 0;
            if(difference.sqrMagnitude > 1f)
            {
                Quaternion rotation = Quaternion.LookRotation(difference);
characterTransform.rotation = rotation;

                Vector3 movement = characterTransform.forward * movementSpeed;// * deltaTime;
velocity.x = movement.x;
                velocity.z = movement.z;
            }


			    /* private void DeactivateNavMeshAgent()
     {
         navMeshAgent.enabled = false;
        // target = destination;
     }
     */
  /*  private void InitialiseNavMeshAgent()
    {
        navMeshAgent.angularSpeed = float.MaxValue;
        navMeshAgent.speed = maxMovementSpeed;
        navMeshAgent.acceleration = float.MaxValue;
        navMeshAgent.updateRotation = false;

    }*/

	        //navMeshAgent.enabled = true;
        //navMeshAgent.SetDestination(destination.position);
        // navMeshAgent.isStopped = false;



            [Server]
    private void DetectPlayersInRange()
    {
        playersInRange.Clear();
        //Debug.Log( "DetectPlayersInRange: " + netId);
        //TODO: Compare my distance to all other players, should be quicker.
        int collidersCount = Physics.OverlapSphereNonAlloc(myTransform.position, 5, collidersInRange);
        //bool playerFound = false;
        for (int i = 0; i < collidersCount; i++)
        {
            PlayerController playerController = collidersInRange[i].GetComponent<PlayerController>();
            if (playerController != null && playerController != this)
            {
                playersInRange.Add(playerController);
                //Debug.Log("playerController found!");
            }
        }

        canTag = playersInRange.Count > 0;
    }    



        public static void PromoteNewTagger(List <PlayerController> players)
    {
        int playerCount = PlayerController.allPlayers.Count;
        int taggerIndex = Random.Range(0, playerCount);
        PlayerController.allPlayers[taggerIndex].SetTagger(true);
    }

        private void FixedUpdate()
    {
        if (false && isFlying/*isServer && */)
        {
            /*  //TODO: Would it be safe to cache fixedDeltaTime?
              float deltaTime = Time.fixedDeltaTime;
              //TODO: will it be more efficient to move via a rigidbody? will it mess with our net-transform..?
              Vector3 movement = myTransform.forward * SPEED * deltaTime;*/

            Vector3 movement = cachedFixedUpdateMovement;// myTransform.forward * FIXED_UPDATE_SPEED;
            rigidbody.MovePosition(rigidbody.position + cachedFixedUpdateMovement);
            //myTransform.position += movement;
        }
    

    /* [SyncVar(hook = nameof(OnFootballCountChange))] private sbyte footballCount = 3;
     private FakeButton fakeFootballButton;

     private void OnFootballCountChange(sbyte oldValue, sbyte newValue)
     {
         if(localPlayerController == this)
         {
             UpdateFakeFootballButtonText();
         }
     }*/



             float velocitySquaredMagnitude = controlledVelocity.sqrMagnitude;
        float maxVelocitySquaredMagnitude = currentMaxMovementSpeed * currentMaxMovementSpeed;//TODO: Pre-Calculate
        float velocityPercentage = (velocitySquaredMagnitude / maxVelocitySquaredMagnitude);

        if(velocityPercentage < 0.1f)//HARDCODED
        {
            //Stay in place if input is negligible
            controlledVelocity = Vector3.zero;
            velocityPercentage = 0;
        } 
        //Debug.Log($"velocitySquaredMagnitude: {velocitySquaredMagnitude.ToString("f2")}");
        if(animator != null)
        {
            //TODO: do this in bigger intervals for performance
            animator.SetFloat(AnimatorParameters.Speed, velocityPercentage);
        }

		                /*if (serverData.trapTimer.IsActive)
                {
                    Debug.LogError("NOT IMPLEMENTED anymore..");
                    bool unTrap = serverData.trapTimer.Update(deltaTime);
                    if (unTrap)
                    {
                        maxMovementSpeed = PlayerServerData.MAX_HEALTHY_MOVEMENT_SPEED;
                    }
                }*/


				    /*[Client]
    public void TryThrowFootball()
    {
        //Debug.Log("TryShoot");
        fakeFootballButton.Press();

        if (footballCount > 0)
        {
            networkAnimator.SetTrigger(AnimatorParameters.Throw);
            Cmd_TryThrowFootball(myTransform.position, myTransform.rotation);
        }
    }*/

    /*[Command]
    private void Cmd_TryThrowFootball(Vector3 clientPlayerPosition, Quaternion clientRotation)
    {
        if (footballCount > 0)
        {
            footballCount--;
            Vector3 ballSpawnPosition =
                (clientPlayerPosition + (myTransform.forward * 1f) + (Vector3.up * 0.5f));//HARDCODED
            Quaternion ballSpawnRotation = clientRotation;
            Spawner.Spawn(Spawnables.ThrownFootball, ballSpawnPosition, ballSpawnRotation);
        }
    }
    */


	    private void UpdateBackgroundImage()
    {
        fillImage.fillAmount = (timeLeft / initialTime);
    }


	    private void OnCollisionEnter(Collision collision)
    {
        //Debug.Log("Banana: OnCollisionEnter");

        if (IsAlive)
        {
            if (isServer)
            {
                //TODO: These invokes mess up everythin, put some death timer instead
                PlayerController playerController = 
                    collision.gameObject.GetComponentInParent<PlayerController>();
                if(playerController != null)
                {
                    Debug.Log("Banana: playerController != null");
                    playerController.OnFootballHit();
                    CancelInvoke("Die");
                    Die();
                }
            }
        }
    }


	
        #region Interactables:
        private Interactable FindInteractable()
        {
            Interactable interactable = null;
            Vector2 mousePosition = Input.mousePosition;
            //NOTE: this is destroyed
            Ray ray = new Ray();// camera.ScreenPointToRay(mousePosition);
            RaycastHit raycastHit;

            if (Physics.Raycast(ray, out raycastHit))
            {
                interactable = raycastHit.collider.GetComponentInParent<Interactable>();
                if (interactable != null)
                {
                    Debug.Log("Interactable found!");
                }
            }

            return interactable;
        }



        #endregion



                    public static void UpdateRotationSpeed(float rotationSpeed)
            {
                ServerData.rotationSpeed = rotationSpeed;
                if(allPlayers != null && allPlayers.Count > 0)
                {
                    for (int i = 0; i < allPlayers.Count; i++)
                    {
                        allPlayers[i].TargetRpc_SetRotationSpeed(ServerData.rotationSpeed);
                    }
                }
                //Debug.Log("PlayerServerData:UpdateRotationSpeed: " + PlayerServerData.rotationSpeed);
            }



                            /*if (instance == null)
                {
                    instance = this;

                    // allowedDroppedItems = new Spawnables[] { Spawnables.HealthPickup, Spawnables.FootballPickup/*, Spawnables.Trap };
                }
                else
                {
                    Destroy(this);
                    Debug.LogError("There can only be ONE Kevin Rubin!");
                }*/




                       /* private IEnumerator InitialiseServerGameScene()
        {

            while (UnityEngine.SceneManagement.SceneManager.GetActiveScene().path != onlineScene)
            {
                yield return new WaitForSeconds(0.1f);
                //TODO: Potential threat- what if for some reason someone tries to spawn something between these WaitForSeconds?
            }
            spawner.Initialise();
        }*/

                if(validSpawnable == null)
        {
            Debug.LogWarning("No dead spawnables were found... ");
        }